// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Ranged input matches snapshot 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div
        class="wrapper undefined"
        data-testid="ranged-input-wrapper"
      >
        <div
          class="input-group"
        >
          <input
            aria-label="Range start"
            class="input"
            data-testid="-range-start"
            placeholder="#"
            required=""
            style="width: 24px;"
            value=""
          />
          <input
            aria-label="Range separator"
            class="input input-separator"
            data-testid="-range-separator"
            placeholder="-"
            style="width: 0px; opacity: 0;"
            value=""
          />
          <input
            aria-label="Range end"
            class="input"
            data-testid="-range-end"
            placeholder="#"
            style="width: 0px; opacity: 0;"
            value=""
          />
        </div>
        <div
          class="placeholder"
        >
          PLC
        </div>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="wrapper undefined"
      data-testid="ranged-input-wrapper"
    >
      <div
        class="input-group"
      >
        <input
          aria-label="Range start"
          class="input"
          data-testid="-range-start"
          placeholder="#"
          required=""
          style="width: 24px;"
          value=""
        />
        <input
          aria-label="Range separator"
          class="input input-separator"
          data-testid="-range-separator"
          placeholder="-"
          style="width: 0px; opacity: 0;"
          value=""
        />
        <input
          aria-label="Range end"
          class="input"
          data-testid="-range-end"
          placeholder="#"
          style="width: 0px; opacity: 0;"
          value=""
        />
      </div>
      <div
        class="placeholder"
      >
        PLC
      </div>
    </div>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
